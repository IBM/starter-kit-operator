// Code generated by go-swagger; DO NOT EDIT.

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAPIV1SecretsLabelSelectorDevxHandlerFunc turns a function with the right signature into a get API v1 secrets label selector devx handler
type GetAPIV1SecretsLabelSelectorDevxHandlerFunc func(GetAPIV1SecretsLabelSelectorDevxParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAPIV1SecretsLabelSelectorDevxHandlerFunc) Handle(params GetAPIV1SecretsLabelSelectorDevxParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetAPIV1SecretsLabelSelectorDevxHandler interface for that can handle valid get API v1 secrets label selector devx params
type GetAPIV1SecretsLabelSelectorDevxHandler interface {
	Handle(GetAPIV1SecretsLabelSelectorDevxParams, interface{}) middleware.Responder
}

// NewGetAPIV1SecretsLabelSelectorDevx creates a new http.Handler for the get API v1 secrets label selector devx operation
func NewGetAPIV1SecretsLabelSelectorDevx(ctx *middleware.Context, handler GetAPIV1SecretsLabelSelectorDevxHandler) *GetAPIV1SecretsLabelSelectorDevx {
	return &GetAPIV1SecretsLabelSelectorDevx{Context: ctx, Handler: handler}
}

/*GetAPIV1SecretsLabelSelectorDevx swagger:route GET /api/v1/secrets?labelSelector=devx core_v1 getApiV1SecretsLabelSelectorDevx

list or watch objects of kind Secret

list or watch objects of kind Secret

*/
type GetAPIV1SecretsLabelSelectorDevx struct {
	Context *middleware.Context
	Handler GetAPIV1SecretsLabelSelectorDevxHandler
}

func (o *GetAPIV1SecretsLabelSelectorDevx) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAPIV1SecretsLabelSelectorDevxParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
