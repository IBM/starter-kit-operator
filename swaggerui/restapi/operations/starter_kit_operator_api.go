// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/runtime/yamlpc"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ibm/starter-kit-operator/swaggerui/restapi/operations/core_v1"
	"github.com/ibm/starter-kit-operator/swaggerui/restapi/operations/starter_kit_operations"
)

// NewStarterKitOperatorAPI creates a new StarterKitOperator instance
func NewStarterKitOperatorAPI(spec *loads.Document) *StarterKitOperatorAPI {
	return &StarterKitOperatorAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		YamlConsumer: yamlpc.YAMLConsumer(),

		JSONProducer: runtime.JSONProducer(),
		ProtobufProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("protobuf producer has not yet been implemented")
		}),
		YamlProducer: yamlpc.YAMLProducer(),

		CoreV1GetAPIV1SecretsLabelSelectorDevxHandler: core_v1.GetAPIV1SecretsLabelSelectorDevxHandlerFunc(func(params core_v1.GetAPIV1SecretsLabelSelectorDevxParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.GetAPIV1SecretsLabelSelectorDevx has not yet been implemented")
		}),
		StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler: starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandlerFunc(func(params starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkits has not yet been implemented")
		}),
		StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler: starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandlerFunc(func(params starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsName has not yet been implemented")
		}),
		StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatusHandler: starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatusHandlerFunc(func(params starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatus has not yet been implemented")
		}),
		StarterKitOperationsGetApisDevxIbmComV1alpha1StarterkitsHandler: starter_kit_operations.GetApisDevxIbmComV1alpha1StarterkitsHandlerFunc(func(params starter_kit_operations.GetApisDevxIbmComV1alpha1StarterkitsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation starter_kit_operations.GetApisDevxIbmComV1alpha1Starterkits has not yet been implemented")
		}),
		StarterKitOperationsPostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler: starter_kit_operations.PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandlerFunc(func(params starter_kit_operations.PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation starter_kit_operations.PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkits has not yet been implemented")
		}),
		StarterKitOperationsPutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler: starter_kit_operations.PutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandlerFunc(func(params starter_kit_operations.PutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation starter_kit_operations.PutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsName has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (Bearer) Authorization from header param [Authorization] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*StarterKitOperatorAPI Perform operations on Starter Kits. */
type StarterKitOperatorAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// YamlConsumer registers a consumer for the following mime types:
	//   - application/yaml
	YamlConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// ProtobufProducer registers a producer for the following mime types:
	//   - application/vnd.kubernetes.protobuf
	ProtobufProducer runtime.Producer
	// YamlProducer registers a producer for the following mime types:
	//   - application/yaml
	YamlProducer runtime.Producer

	// BearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// CoreV1GetAPIV1SecretsLabelSelectorDevxHandler sets the operation handler for the get API v1 secrets label selector devx operation
	CoreV1GetAPIV1SecretsLabelSelectorDevxHandler core_v1.GetAPIV1SecretsLabelSelectorDevxHandler
	// StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler sets the operation handler for the get apis devx ibm com v1alpha1 namespaces namespace starterkits operation
	StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler
	// StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler sets the operation handler for the get apis devx ibm com v1alpha1 namespaces namespace starterkits name operation
	StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler
	// StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatusHandler sets the operation handler for the get apis devx ibm com v1alpha1 namespaces namespace starterkits name status operation
	StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatusHandler starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatusHandler
	// StarterKitOperationsGetApisDevxIbmComV1alpha1StarterkitsHandler sets the operation handler for the get apis devx ibm com v1alpha1 starterkits operation
	StarterKitOperationsGetApisDevxIbmComV1alpha1StarterkitsHandler starter_kit_operations.GetApisDevxIbmComV1alpha1StarterkitsHandler
	// StarterKitOperationsPostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler sets the operation handler for the post apis devx ibm com v1alpha1 namespaces namespace starterkits operation
	StarterKitOperationsPostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler starter_kit_operations.PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler
	// StarterKitOperationsPutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler sets the operation handler for the put apis devx ibm com v1alpha1 namespaces namespace starterkits name operation
	StarterKitOperationsPutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler starter_kit_operations.PutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *StarterKitOperatorAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *StarterKitOperatorAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *StarterKitOperatorAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *StarterKitOperatorAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *StarterKitOperatorAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *StarterKitOperatorAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *StarterKitOperatorAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *StarterKitOperatorAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *StarterKitOperatorAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the StarterKitOperatorAPI
func (o *StarterKitOperatorAPI) Validate() error {
	var unregistered []string

	if o.YamlConsumer == nil {
		unregistered = append(unregistered, "YamlConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.ProtobufProducer == nil {
		unregistered = append(unregistered, "ProtobufProducer")
	}
	if o.YamlProducer == nil {
		unregistered = append(unregistered, "YamlProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.CoreV1GetAPIV1SecretsLabelSelectorDevxHandler == nil {
		unregistered = append(unregistered, "core_v1.GetAPIV1SecretsLabelSelectorDevxHandler")
	}
	if o.StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler == nil {
		unregistered = append(unregistered, "starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler")
	}
	if o.StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler == nil {
		unregistered = append(unregistered, "starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler")
	}
	if o.StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatusHandler == nil {
		unregistered = append(unregistered, "starter_kit_operations.GetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatusHandler")
	}
	if o.StarterKitOperationsGetApisDevxIbmComV1alpha1StarterkitsHandler == nil {
		unregistered = append(unregistered, "starter_kit_operations.GetApisDevxIbmComV1alpha1StarterkitsHandler")
	}
	if o.StarterKitOperationsPostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler == nil {
		unregistered = append(unregistered, "starter_kit_operations.PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler")
	}
	if o.StarterKitOperationsPutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler == nil {
		unregistered = append(unregistered, "starter_kit_operations.PutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *StarterKitOperatorAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *StarterKitOperatorAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "Bearer":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.BearerAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *StarterKitOperatorAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *StarterKitOperatorAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/yaml":
			result["application/yaml"] = o.YamlConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *StarterKitOperatorAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "application/vnd.kubernetes.protobuf":
			result["application/vnd.kubernetes.protobuf"] = o.ProtobufProducer
		case "application/yaml":
			result["application/yaml"] = o.YamlProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *StarterKitOperatorAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the starter kit operator API
func (o *StarterKitOperatorAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *StarterKitOperatorAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/secrets?labelSelector=devx"] = core_v1.NewGetAPIV1SecretsLabelSelectorDevx(o.context, o.CoreV1GetAPIV1SecretsLabelSelectorDevxHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/devx.ibm.com/v1alpha1/namespaces/{namespace}/starterkits"] = starter_kit_operations.NewGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkits(o.context, o.StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/devx.ibm.com/v1alpha1/namespaces/{namespace}/starterkits/{name}"] = starter_kit_operations.NewGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsName(o.context, o.StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/devx.ibm.com/v1alpha1/namespaces/{namespace}/starterkits/{name}/status"] = starter_kit_operations.NewGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatus(o.context, o.StarterKitOperationsGetApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/devx.ibm.com/v1alpha1/starterkits"] = starter_kit_operations.NewGetApisDevxIbmComV1alpha1Starterkits(o.context, o.StarterKitOperationsGetApisDevxIbmComV1alpha1StarterkitsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/devx.ibm.com/v1alpha1/namespaces/{namespace}/starterkits"] = starter_kit_operations.NewPostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkits(o.context, o.StarterKitOperationsPostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/devx.ibm.com/v1alpha1/namespaces/{namespace}/starterkits/{name}"] = starter_kit_operations.NewPutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsName(o.context, o.StarterKitOperationsPutApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsNameHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *StarterKitOperatorAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *StarterKitOperatorAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *StarterKitOperatorAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *StarterKitOperatorAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *StarterKitOperatorAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
