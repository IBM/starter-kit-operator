// Code generated by go-swagger; DO NOT EDIT.

package starter_kit_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewPostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams creates a new PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams object
// no default values defined in spec.
func NewPostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams() PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams {

	return PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams{}
}

// PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams contains all the bound params for the post apis devx ibm com v1alpha1 namespaces namespace starterkits operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkits
type PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Stringified yaml matching starter kit kind.
	  Required: true
	  In: body
	*/
	Body string
	/*Namespace where the starter kit will be located.
	  Required: true
	  In: path
	*/
	Namespace string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams() beforehand.
func (o *PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body string
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// no validation required on inline body
			o.Body = body
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}
	rNamespace, rhkNamespace, _ := route.Params.GetOK("namespace")
	if err := o.bindNamespace(rNamespace, rhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindNamespace binds and validates parameter Namespace from path.
func (o *PostApisDevxIbmComV1alpha1NamespacesNamespaceStarterkitsParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Namespace = raw

	return nil
}
